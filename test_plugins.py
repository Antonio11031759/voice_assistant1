#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –Ω–æ–≤—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from vacore import VACore

def test_core_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–¥—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–¥—Ä–∞...")
    
    try:
        core = VACore()
        print("‚úÖ –Ø–¥—Ä–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
        return core
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è–¥—Ä–∞: {e}")
        return None

def test_plugin_loading(core):
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≥–∏–Ω–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≥–∏–Ω–æ–≤...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
        core.init_with_plugins()
        print("‚úÖ –ü–ª–∞–≥–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if core.commands:
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(core.commands)}")
            for cmd in list(core.commands.keys())[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {cmd}")
        else:
            print("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≥–∏–Ω–æ–≤: {e}")
        return False

def test_plugin_commands(core):
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–ª–∞–≥–∏–Ω–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥...")
    
    test_commands = [
        "—Ç–µ—Å—Ç",
        "–∫–∞–∫ –¥–µ–ª–∞",
        "–≤—Ä–µ–º—è"
    ]
    
    for cmd in test_commands:
        try:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É: '{cmd}'")
            if cmd in core.commands:
                print(f"   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞")
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                core.execute_next(cmd, None)
            else:
                print(f"   ‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

def test_spotify_plugin():
    """–¢–µ—Å—Ç Spotify –ø–ª–∞–≥–∏–Ω–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Spotify –ø–ª–∞–≥–∏–Ω–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
        from plugins.plugin_spotify import start, SpotifyAPI
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ API
        api = SpotifyAPI("test_id", "test_secret", "http://localhost:5003/callback")
        print("‚úÖ Spotify API –∫–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º manifest
        manifest = start(None)
        print(f"‚úÖ Spotify –ø–ª–∞–≥–∏–Ω manifest: {manifest['name']}")
        print(f"   –ö–æ–º–∞–Ω–¥—ã: {len(manifest['commands'])}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Spotify –ø–ª–∞–≥–∏–Ω–∞: {e}")
        return False

def test_homeassistant_plugin():
    """–¢–µ—Å—Ç Home Assistant –ø–ª–∞–≥–∏–Ω–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Home Assistant –ø–ª–∞–≥–∏–Ω–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
        from plugins.plugin_homeassistant import start, HomeAssistantAPI
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ API
        api = HomeAssistantAPI("http://localhost:8123", "test_token")
        print("‚úÖ Home Assistant API –∫–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º manifest
        manifest = start(None)
        print(f"‚úÖ Home Assistant –ø–ª–∞–≥–∏–Ω manifest: {manifest['name']}")
        print(f"   –ö–æ–º–∞–Ω–¥—ã: {len(manifest['commands'])}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Home Assistant –ø–ª–∞–≥–∏–Ω–∞: {e}")
        return False

def test_config_files():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    config_files = [
        "options/test.json",
        "options/spotify.json", 
        "options/homeassistant.json"
    ]
    
    for config_file in config_files:
        try:
            if os.path.exists(config_file):
                print(f"‚úÖ {config_file} - –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
                with open(config_file, 'r', encoding='utf-8') as f:
                    import json
                    config = json.load(f)
                    print(f"   JSON –≤–∞–ª–∏–¥–µ–Ω, –∫–ª—é—á–∏: {list(config.keys())}")
            else:
                print(f"‚ùå {config_file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {config_file}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ Irene Voice Assistant")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞
    core = test_core_initialization()
    if not core:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —è–¥—Ä–æ. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
        return
    
    # –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
    if not test_plugin_loading(core):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–≥–∏–Ω—ã. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
        return
    
    # –¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    test_plugin_commands(core)
    
    # –¢–µ—Å—Ç 4: Spotify –ø–ª–∞–≥–∏–Ω
    test_spotify_plugin()
    
    # –¢–µ—Å—Ç 5: Home Assistant –ø–ª–∞–≥–∏–Ω
    test_homeassistant_plugin()
    
    # –¢–µ—Å—Ç 6: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    test_config_files()
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ options/")
    print("2. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è Spotify –∏ Home Assistant")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: python runva_webapi.py")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")

if __name__ == "__main__":
    main()
